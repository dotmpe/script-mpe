#!/usr/bin/env bash

## CI suite in container

# Run entire CI suite or specific command in container from fresh checkout.
# 
# - should work on existing checkout
# - should refresh worktree from remote
# - should allow alternate remote

set -euo pipefail

: "${dckr_user:="treebox"}"

: "${repo_rev:="$(git rev-parse --abbrev-ref HEAD)"}"
: "${repo_slug:="dotmpe/script-mpe"}" # No-Sync

test ${srv_scm:=0} -eq 1 && {
  # XXX: using specific user-conf setup to determine local GIT remote repo
  : "${vol_id_label:="$(basename "$(realpath /srv/scm-git-local)"|cut -c9-)"}"
  : "${repo_url:="/srv/scm-git-$vol_id_label/$repo_slug"}"
  : "${vol_id:="$(echo $vol_id_label|cut -d'-' -f1,2 --output-delimiter=-)"}"
  : "${repo_id:="$vol_id-bare"}"
} || {
  : "${repo_url:="https://github.com/$repo_slug"}"
  : "${repo_id:="origin"}"
}

w=/src/github.com/${repo_slug}
u=${dckr_user}
c=${docker_name:-"u-s-dckr"}


# Create checkout if needed
docker exec -u $u -ti ${c} \
  sh -c "test -e '$w' || { mkdir -p $(dirname $w) && git clone --origin $repo_id $repo_url $w; } "

# Ensure remote is configured correctly
docker exec -w $w -u $u -ti ${c}  \
    sh -c "{ git config remote.$repo_id.url >/dev/null;} && {
        test '$repo_url' = \"\$(git config remote.$repo_id.url)\" || { r=\$?
          echo Remote '$repo_id' misconfigured >&2;
          exit \$r;
        }
      } || { git remote add $repo_id $repo_url && git fetch $repo_id; }"

# Reset worktree state and show version
docker exec -w $w -u $u -ti ${c} sh -c "
    git fetch $repo_id &&
    git reset --hard ${repo_id}/${repo_rev} &&
    git describe
  "

# Start command
test $# -gt 0 -a -n "${1-}" || set -- '. ./sh-ci'
echo "sh-treebox-ci: Starting '$*' in $c..." >&2
docker exec -w $w -u $u -ti ${c} bash -c "$@"


# Sync: U-S:
# Id: u-s/0.0 sh-treebox-ci vim:ft=bash:
