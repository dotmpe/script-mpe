#!/usr/bin/env bash

### Helper to dislay (short) system status, for use in status bars

#shellcheck disable=SC1090


short () # ~ [<Separator>] # Print 5min load, SystemD short, uptime and emails-count
{
  test -n "${1:-}" || set -- " "
  printf "$(less-uptime l 2)$1$(systemd-short)$1$(less-uptime p)"
  test -z "${UC_MAIL:-}" || {
    printf "$1$(emails-count)"
  }
  echo
}

## New e-mails

# Count new e-mails (simple impl. for mutt with maildirs only).
# User-config must exist or else nothing is done.
emails () # ~ # If configured, print emails
{
  emails-user-conf || return 0
  mutt-indicator
}

# Idem to emails however show new-mail counter as well
emails-count () # ~ # If configured, print email indicator and new-count
{
#MUTTRC_MAILBOXES=$HOME/.conf/etc/mutt/mailboxes.rc system-status emails-count
  emails-user-conf || return 0
  mutt-indicator-count
}

emails-user-conf ()
{
  mutt-user-conf
}

# User mail-folder must be configured and maildir with inbox must exist.
mutt-user-conf ()
{
  test $# -gt 0 || set -- ${MUTTRC:-"$HOME/.muttrc"}
  local folder
  folder=$(eval "echo $(grep '^set folder=' $1 | sed 's/.*"\([^"]*\)"$/\1/')")
  test -e $folder/new
}

# Show email indicator if any new mail has been delivered
mutt-indicator ()
{
  mutt-new || return 0
  printf $nf_mdi_email_outline
}

mutt-indicator-count ()
{
  local count=$(mutt-count-new | awk '{sum+=$1} END{print sum;}')
  test ${count:-0} -eq 0 && return
  printf $nf_mdi_email_outline
  # XXX: this seems to be two characters wide? Messes up entire tmux screen.
  #printf $nf_mdi_email_variant
  printf ' '
  printf $count
}

mutt-new ()
{
  test -n "$(count_first=1 mutt-count-new)"
}

mutt-count-new ()
{
  local inb
  for inb in $(mutt-inboxes)
  do
    test -d "$inb/" || continue
    count=$(find $inb -mindepth 1 -maxdepth 1 | wc -l)
    test $count -eq 0 && continue
    echo "$count $inb"
    test ${count_first:-0} -eq 0 || return 0
  done
}

mutt-inboxes () # ~ <Muttrc> <Muttrc-Mailboxes> #
{
  test $# -gt 0 || set -- ${MUTTRC:-"$HOME/.muttrc"}
  test $# -gt 1 || set -- "$1" ${MUTTRC_MAILBOXES:-"$1"}

  local folder
  folder=$( grep '^set folder=' $1 | sed 's/.*"\([^"]*\)"$/\1/')

  ! grep -q '^mailboxes ' $2 || {
    grep '^mailboxes ' $2 | sed \
        -e 's/mailboxes//' \
        -e 's# + # "'"$folder"'" #' \
        -e 's#"+#"'"$folder/"'#g' \
        -e 's/ "\([^"]*\)"/\1\n/g' |
            while read -r path
            do test -n "$path" || continue
                eval "echo $path/new"; done
  }
}

## Battery/power status

battery () # ~ # Print short battery indication (if relevant)
{
  charge-left-unconnected
}

power-connected () # ~ # Test if an AC power adapter is connected
{
  acpi -V | grep '^Adapter ' | grep -q ' on-line$'
}

battery-charging () # ~ # Test is a battery is charging
{
  acpi | cut -d' ' -f3 | grep -q '^Charging'
}

battery-discharging () # ~ # Test is a battery is discharging
{
  acpi | cut -d' ' -f3 | grep -q '^Discharging'
}

# Display battery charge when running on battery,
# or AC and level indicator when charging. Otherwise nothing.
charge-left-unconnected ()
{
  set -- $( battery-charge | cut -d. -f1 )

  # shellcheck disable=SC2015
  power-connected && {

    battery-charging && {

      # Show current capacity level
      test -z "${battery_c_charging:-}" || printf '%s' "${battery_c_charging}"
      test "${NERD_FONT:-1}" != "0" && {
        battery-charge-icon-"${NERD_FONT_BAT:-mdi}" "$1"
      } || {
        printf '%s%%' "$1"
      }
      test -z "${battery_c_charging:-}" || printf '%s' "${battery_c_normal}"

      printf ' '

      # And charging AC indicator
      test "${NERD_FONT:-1}" != "0" && {
        local nerd_font_codename=nf_${NERD_FONT_AC:-mdi}_plug
        echo -en "${!nerd_font_codename}"
      } || {
        printf AC
      }

    } || {

      ! battery-discharging || {
        battery-level-prefix "$1"

        # Detect forced discharge (while on AC) as well
        test "${NERD_FONT:-1}" != "0" && {

          battery-charge-icon-"${NERD_FONT_BAT:-mdi}" "$1"
        } || {
          printf '%s%%' "$1"
        }

        battery-level-normal
      }
    }

  } || {

    battery-level-prefix "$1"

    # Show battery capacity level
    test "${NERD_FONT:-1}" != "0" && {
      battery-charge-icon-"${NERD_FONT_BAT:-mdi}" "$1"
    } || {
      printf '%s%%' "$(battery-charge)"
    }

    battery-level-normal
  }
}

battery-charges ()
{
  acpi | cut -d, -f2
}

# Print total charge in procent (without percent character)
battery-charge-total ()
{
  local x c=0
  for x in $(seq 0 $(( ${NUM_BAT?} - 1 )))
  do
    c=$(( c + $(cat /sys/class/power_supply/BAT$x/capacity) ))
  done
  echo "$c / $NUM_BAT" | bc

  # This would require sudoer setup:
  #sudo tlp-stat -b | grep Charge\ total | awk '{print $5}'
}

# Print battery charge in procent (without percent character)
battery-charge () # ~ # Report charge left in percent of (actual) capacity
{
  test ${NUM_BAT:-1} -gt 1 && {
    battery-charge-total
    return
  } || {
    battery-charges | tr -d '% '
  }
}

charge () # ~ # TODO: report on actual charge, print capacity left as well
{
  false
}

battery-charge-icon-fa ()
{
  test $# -gt 0 || set -- $( battery-charge | cut -d. -f1 )
  if test $1 -lt 25
  then printf $nf_fa_battery_0
  elif test $1 -lt 50
  then printf $nf_fa_battery_1
  elif test $1 -lt 75
  then printf $nf_fa_battery_2
  elif test $1 -lt 100
  then printf $nf_fa_battery_3
  else printf $nf_fa_battery_4
  fi
}

battery-charge-icon-mdi ()
{
  test $# -gt 0 || set -- $( battery-charge | cut -d. -f1 )
  if test $1 -lt 20
  then printf $nf_mdi_battery_10
  elif test $1 -lt 30
  then printf $nf_mdi_battery_20
  elif test $1 -lt 40
  then printf $nf_mdi_battery_30
  elif test $1 -lt 50
  then printf $nf_mdi_battery_40
  elif test $1 -lt 60
  then printf $nf_mdi_battery_50
  elif test $1 -lt 70
  then printf $nf_mdi_battery_60
  elif test $1 -lt 80
  then printf $nf_mdi_battery_70
  elif test $1 -lt 90
  then printf $nf_mdi_battery_80
  elif test $1 -lt 100
  then printf $nf_mdi_battery_90
  else printf $nf_mdi_battery
  fi
}

battery-level-prefix () # ~ <Pct>
{
  test -z "${battery_level_low:-}" && return
  if test $1 -le $battery_level_low
  then printf '%s' "${battery_level_c_low}"
  else printf '%s' "${battery_level_c_ok}"
  fi
}

battery-level-normal ()
{
  test -z "${battery_level_low:-}" && return
  printf '%s' "${battery_c_normal}"
}



## SystemD status

# Short description of SystemD (is-system-running in manual)
systemd-status-text () # ~ # Report SystemD state
{
  systemctl is-system-running | tr -d ' \n'
}

# Icon, or description and fail-count but only if not running
systemd-short () # ~ # Short indicator for SystemD state
{
  test $# -gt 0 || set -- $(systemd-status-text)

  local msg
  test "${NERD_FONT:-1}" != "0" && {
    msg=$(systemd-status-icon-${NERD_FONT_STATUS:-fa} "$1")
  } ||
    msg="$1"

  test "$1" != "running" &&
      printf "$msg(%s)" $(systemd-count-failed) ||
      printf "$msg"
}

systemd-count-failed () # ~ # Count failed SystemD units
{
  systemctl list-units | grep -c ' failed '
}

systemd-failed () # ~ # List failed SystemD unit names
{
  systemctl --failed | grep failed | cut -d' ' -f2 | sed 's/\.service$//'
}

failed () # ~ # Oneline report of state and failed unit names
{
  test $# -gt 0 || set -- $(systemd-status-text)
  test "$1" != "running" || return 0
  echo $1: $(systemd-failed)
}


# A Nerd font is required to use these

nf_fa_check='\Uf00c'
nf_fa_exclamation='\Uf12a'
nf_fa_delicious='\Uf1a5'
nf_fa_exclamation_circle='\Uf06a'
nf_fa_exclamation_triangle='\Uf071'
nf_fa_flash='\Uf0e7'
nf_fa_plug='\Uf1e6'
nf_fa_gear='\Uf013'

nf_fa_battery_0='\Uf244'
nf_fa_battery_1='\Uf243'
nf_fa_battery_2='\Uf242'
nf_fa_battery_3='\Uf241'
nf_fa_battery_4='\Uf240'

nf_mdi_email='\Uf6ed'
nf_mdi_email_outline='\Uf6ef'
nf_mdi_email_variant='\Ufaef'
nf_mdi_mailbox='\Ufbec'
nf_mdi_power_plug='\Ufba3'
nf_mdi_plug=$nf_mdi_power_plug
nf_mdi_power_plug_off='\Ufba4'
nf_mdi_battery='\Uf578'
nf_mdi_battery_10='\Uf579'
nf_mdi_battery_20='\Uf57a'
nf_mdi_battery_30='\Uf57b'
nf_mdi_battery_40='\Uf57c'
nf_mdi_battery_50='\Uf57d'
nf_mdi_battery_60='\Uf57e'
nf_mdi_battery_70='\Uf57f'
nf_mdi_battery_80='\Uf580'
nf_mdi_battery_90='\Uf581'

nf_oct_email='\Uf42f'
nf_oct_alert='\Uf421'
nf_oct_check='\Uf42e'
nf_oct_circle_slash='\Uf468'
nf_oct_clock='\Uf43a'
nf_oct_eye='\Uf441'
nf_oct_gear='\Uf443'
nf_oct_heart='\U2665'
nf_oct_issue_openend='\Uf41d'
nf_oct_lock='\Uf456'
nf_oct_light_bulb='\Uf400'
nf_oct_mute='\Uf466'
nf_oct_plug='\Uf492'
nf_oct_pulse='\Uf469'
nf_oct_rss='\Uf428'
nf_oct_shield='\Uf49c'
nf_oct_star='\Uf41e'
nf_oct_stop='\Uf46e'
nf_oct_x='\Uf467'
nf_oct_zap='\U26a1'


systemd-status-icon-oct () # ~ [<State>] # Print Octicon for SystemD state
{
  test $# -gt 0 || set -- "$(systemd-status-text)"
  case "$1" in

    initializing | \
    starting ) printf $nf_oct_zap ;;
    running ) printf $nf_oct_check ;;
    #degraded ) ;;
    maintenance ) printf $nf_oct_gear ;;
    stopping ) printf $nf_oct_stop ;;
    offline ) printf $nf_oct_circle_slash ;;
    unknown ) printf $nf_oct_x ;;

    * ) printf $nf_oct_alert ;;
  esac
}

systemd-status-icon-fa () # ~ [<State>] # Print Font-Awesome icon for SystemD state
{
  test $# -gt 0 || set -- "$(systemd-status-text)"
  case "$1" in

    initializing | \
    starting ) printf $nf_fa_flash ;;
    running ) printf $nf_fa_check ;;
    maintenance ) printf $nf_fa_gear ;;

    * ) printf $nf_fa_exclamation_triangle ;;
  esac
}


system_status_usage ()
{
  #shellcheck disable=SC2154
  printf \
'\t%s <Command <Arg...>>

Env:
\tNERD_FONT 1
\tNERD_FONT_BAT
\tNERD_FONT_AC
\tNERD_FONT_STATUS
\tMUTTRC
\tMUTTRC_MAILBOXES
' "$base"
}


test -n "${user_scripts_loaded:-}" || {
  . ~/bin/user-scripts.sh
  user_scripts_loadenv
}
! script_isrunning "system-status" || eval "set -- $(user_script_defarg "$@")"
script_defcmd=short script_entry "system-status" "$@"
#
