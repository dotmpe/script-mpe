#!/bin/sh

## Helper to deal with X server displays

#shellcheck disable=SC1090,1007


displays ()
{
  connected_info | cut -d' ' -f1
}

primary () # ~ # List name of primary display
{
  primary_info | cut -d' ' -f1
}

connected_info () # ~ # List xrandr line of each connected display
{
  xrandr | grep ' connected '
}

display_info () # ~ [<Name>] # List xrandr lines (with display names and resolution/offset info)
{
  test $# -gt 0 || set -- ".*"
  connected_info | grep "^$1 " | sed 's/\( connected\| primary\)//g'
}

primary_info ()
{
  xrandr | grep ' connected primary'
}

aux_info ()
{
  connected_info | grep -v ' primary '
}

display () # ~ ['primary'|'aux'|'all'|<Glob>] # List display names
{
  test $# -gt 0 || set -- all
  for spec in "$@"
  do
    case "$spec" in
      ( "primary" ) primary ;;
      ( "aux" ) aux_info | cut -d' ' -f1 ;;

      ( "all" )
          true "${displays:=$(displays)}"
          echo "$displays" ;;

      ( * )
          true "${displays:=$(displays)}"
          for display in $displays
          do case "$display" in ( $spec ) echo "$display" ;; esac
          done ;;
    esac
  done
}

display_setbg () # ~ <Display> <File> <Mode>
{
  . ~/bin/user-desktop.sh

  display_info "$1" | grep -Po '\b[0-9]+x[0-9]+'
  false # TODO: feh can presumably easily set any png/jpg.
}

# Set to value from 0.0-1.0
# XXX: I cant see how to get the current value
brightness () # ~ <Value> <Display>... # Set brightness for displays
{
  test $# -gt 0 || return
  v="$1"
  shift
  #shellcheck disable=2046
  set -- $(display "$1") || return

  #shellcheck disable=2068
  for d in $@
  do xrandr --output "$d" --brightness "$v"
  done
  unset v d
}

on () # ~ # Set brightness to 1.0 for all displays
{
  brightness 1.0 all
}

off () # ~ # Set brightness to 0.0 for all displays
{
  brightness 0 all
}

list () # ~ <Spec> # List matching, use e.g. all, primary, *DP* or HDMI*. See'display'.
{
  display "$@"
}

mouse_sh ()
{
  xdotool getmouselocation | sed -e '
        s/\(^\| \)/\nmouse_/g
        s/:/=/g
    '
}

mouse () # ~ # Report display name where mousepointer currently is
{
  mouse_display | cut -d ' ' -f 1
}

mouse_display () # ~ # Report display name and mousepointer info
{
  eval "$(mouse_sh)"
  #shellcheck disable=SC2154,2086,2004
  display_info |
      tr -s 'x+' ' ' | while read_line name width height dx dy rest
    do
        test $mouse_x -ge $dx -a $mouse_x -le $(( $dx + $width )) || continue
        test $mouse_y -ge $dy -a $mouse_y -le $(( $dy + $height )) || continue

        echo "$name ${mouse_x}x${mouse_y} ${width}x${height}+$dx+$dy"
        break
    done
}


test -n "${user_scripts_loaded:-}" || . ~/bin/user-scripts.sh

# Parse arguments
! script_isrunning "system-display" || eval "set -- $(user_script_defarg "$@")"

# Execute argv and return
script_defcmd=list script_entry "system-display" "$@"
#
