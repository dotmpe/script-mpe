#!/bin/sh

## Helper to deal with X server displays

#shellcheck disable=SC1090,1007


displays () # ~ # Display monitor link names
{
  xorg_names
  #xorg_info_connected | cut -d' ' -f1
}

primary () # ~ # List name of primary display
{
  xorg_info_primary | cut -d' ' -f1
}

display_info ()
{
  xorg_info "$@"
}

# TODO: set with zoom,fill,center,tile modes
display_setbg () # ~ <Display> <File> <Mode>
{
  display_info "$1" | grep -Po '\b[0-9]+x[0-9]+'
  false # TODO: feh can presumably easily set any png/jpg.
}

# Set to value from 0.0-1.0
# TODO: use xrandr --verbose to get at brightness, gamma
brightness () # ~ <Value> <Display>... # Set brightness for displays
{
  test $# -gt 0 || return
  v="$1"
  shift
  #shellcheck disable=2046
  set -- $(xorg_display "$1") || return

  #shellcheck disable=2068
  for d in $@
  do xrandr --output "$d" --brightness "$v"
  done
  unset v d
}

on () # ~ # Set brightness to 1.0 for all displays
{
  brightness 1.0 all
}

off () # ~ # Set brightness to 0.0 for all displays
{
  brightness 0 all
}

# List names
list () # ~ <Spec> # List matching, use e.g. all, primary, *DP* or HDMI*. See 'xorg-display'.
{
  xorg_display "$@"
}

# List onelines for each monitor with link-name
info ()
{
  xorg_info "$@"
}

monitors ()
{
  xrandr_info
}

mouse_sh ()
{
  xdotool getmouselocation | sed -e '
        s/\(^\| \)/\nmouse_/g
        s/:/=/g
    '
}

mouse () # ~ # Report display name where mousepointer currently is
{
  mouse_display | cut -d ' ' -f 1
}

# Cant seem to do this with xdotool directly? Desktop numbering is
# strange as well.
mouse_display () # ~ # Report display name and mousepointer info
{
  eval "$(mouse_sh)"
  #shellcheck disable=SC2154,2086,2004
  display_info |
      tr -s 'x+' ' ' | while read_line name width height dx dy rest
    do
        test $mouse_x -ge $dx -a $mouse_x -le $(( $dx + $width )) || continue
        test $mouse_y -ge $dy -a $mouse_y -le $(( $dy + $height )) || continue

        echo "$name ${mouse_x}x${mouse_y} ${width}x${height}+$dx+$dy"
        break
    done
}

#shellcheck disable=2015,2086,2154
window_geometry () # ~ [<Window-ID>]
{
  test $# -gt 0 || set -- "$(xdotool getactivewindow)"
  fun_flags window_geometry r g
  xwininfo -id "$1" | awk -F ":" ' /(Absolute upper|Width|Height)/ {
        gsub("^ *", "", $1)
        gsub("^ *", "", $2)
        print $1"\t"$2
    }' | { test $window_geometry_r = 1 && cat || {
        tr '\n' '\t' | {
          test $window_geometry_g = 1 &&
            awk ' BEGIN{FS="\t"} { print $6"x"$8"+"$2"+"$4 }' ||
                awk ' BEGIN{FS="\t"} { print $2" "$4" "$6" "$8 }'
      }
    }
  }
}


system_display_loadenv ()
{
  . "$US_BIN"/xorg.lib.sh &&
  . "$US_BIN"/user-scripts.lib.sh &&
  . "$US_BIN"/user-desktop
}

system_display_usage ()
{
  printf \
'    %s <Command <Arg...>>

FIXME: have been meaning to list actual monitor names iso. link names but
found only incomplete data with read-edid.
But e.g.
xconf-query -lvc displays
and other config tools do provide actual monitor names.
' "$base"
}


# Main entry (see user-scripts.sh for boilerplate)

test -n "${user_scripts_loaded:-}" || {
  . "${US_BIN:-"$HOME/bin"}"/user-scripts.sh
  unset SHELL
  user_scripts_loadenv
}

# Parse arguments
! script_isrunning "system-display" ||
    eval "set -- $(user_script_defarg "$@")"

# Execute argv and return
script_defcmd=list \
    script_entry "system-display" "$@"
#
