#!/usr/bin/env bash

### Helper to deal with X server displays

# Its not always completely clear how xrandr, xdotool and other info meshes
# together.

# - mouse-display is able to use the xrandr info with the mouse position to
#   get the link Id and geometry of the monitor the pointer is on.

# - window-geometry gives the geometry for an Id reported by xdotool.

# - monitor-geometry
# TODO: want to get ~ but xdotool does not seem to be able to tell anything
# about a desktop except an Id
# get_desktop_viewport is giving an error about 8 iso 2 items
# however since with I3 I use the mouse warp I figure I can just use the monitor
# geometry reported by mouse-display.
# See poorgaps.


displays () # ~ # Display monitor link names
{
  xorg_names
  #xorg_info_connected | cut -d' ' -f1
}

primary () # ~ # List name of primary display
{
  xorg_info_primary | cut -d' ' -f1
}

display_info ()
{
  xorg_info "$@"
}

# TODO: set with zoom,fill,center,tile modes
display_setbg () # ~ <Display> <File> <Mode>
{
  display_info "$1" | grep -Po '\b[0-9]+x[0-9]+'
  false # TODO: feh can presumably easily set any png/jpg.
}

# Set to value from 0.0-1.0
# TODO: use xrandr --verbose to get at brightness, gamma
brightness () # ~ <Value> <Display>... # Set brightness for displays
{
  test $# -gt 0 || return
  v="$1"
  shift
  #shellcheck disable=2046
  set -- $(xorg_display "$1") || return

  #shellcheck disable=2068
  for d in $@
  do xrandr --output "$d" --brightness "$v"
  done
  unset v d
}

on () # ~ # Set brightness to 1.0 for all displays
{
  brightness 1.0 all
}

off () # ~ # Set brightness to 0.0 for all displays
{
  brightness 0 all
}

# List names
list () # ~ <Spec> # List matching, use e.g. all, primary, *DP* or HDMI*. See 'xorg-display'.
{
  xorg_display "$@"
}

info () # ~ # List onelines for each monitor with link-name
{
  xorg_info "$@"
}

monitors () # ~ # List XRANDR info
{
  xorg_screen_info dump
  xrandr_info
}

xorg_extensions ()
{
  xorg_screen_info extensions-info
}

# This reports the X,Y coords on the screen, and there is only on single
# screen '0' for my multimonitor setup.
mouse_sh ()
{
  # xdotool getmouselocation --shell
  xdotool getmouselocation | sed 's/\(^\| \)/\nmouse_/g; s/:/=/g'
}

mouse () # ~ # Report display name where mousepointer currently is
{
  mouse_display | cut -d ' ' -f 1
}

# Cant seem to do this with xdotool directly? Desktop numbering is
# strange as well.
mouse_display () # ~ # Report display name and mousepointer info
{
  eval "$(mouse_sh)"
  #shellcheck disable=SC2154,2086,2004
  fun_flags sd_md h
  display_info |
      tr -s 'x+' ' ' | while read -r name width height dx dy rest
    do
        test $mouse_x -ge $dx -a $mouse_x -le $(( $dx + $width )) || continue
        test $mouse_y -ge $dy -a $mouse_y -le $(( $dy + $height )) || continue

        test $sd_md_h -eq 1 && {
          printf '%s=%s\n%s=%s\n%s=%s\n%s=%s\n%s=%s\n%s=%s\n%s=%s\n' \
              link_name "$name" \
              mouse_x "$mouse_x" mouse_y "$mouse_y" \
              display_width "$width" display_height "$height" \
              display_offset_x "$dx" display_offset_y "$dy"
        } ||
            echo "$name ${mouse_x}x${mouse_y} ${width}x${height}+$dx+$dy"
        break
    done
}

#shellcheck disable=2015,2086,2154
window_geometry () # ~ [<Window-ID>] # Get size of active window
{
  test $# -gt 0 || set -- "$(xdotool getactivewindow)"
  fun_flags window_geometry r g
  xwininfo -id "$1" | awk -F ":" ' /(Absolute upper|Width|Height)/ {
        gsub("^ *", "", $1)
        gsub("^ *", "", $2)
        print $1"\t"$2
    }' | { test $window_geometry_r = 1 && cat || {
        tr '\n' '\t' | {
          test $window_geometry_g = 1 &&
              awk ' BEGIN{FS="\t"} { print $6"x"$8"+"$2"+"$4 }' ||
                  awk ' BEGIN{FS="\t"} { print $2" "$4" "$6" "$8 }'
      }
    }
  }
}

# Its a bit slow, but will get a clean sizing for active window.
# This takes about 1 second.
# Can't change focus while at it or errors happen.
# XXX: can we know actual available size without bar?
poorgaps () # ~ [<Gap=100>] [<HGap>] [<Top-offset>] [<Bottom-offset>]
{
  eval "$(sd_md_h=1 mouse_display)"
  local gap=${1:-100} hgap=${2:-${1:-0}} dw dh
  dw=$(( display_width - ( 2 * hgap ) ))
  dh=$(( display_height - ( 2 * gap ) - ${3:-0} - ${4:-0} ))
  dx=$(( display_offset_x + hgap ))
  dy=$(( display_offset_y + gap + ${3:-0} ))
  $LOG notice ":poorgaps" "Resize/moving window" "move position $dx $dy, resize set $dw $dh"
  i3-msg "move position $dx $dy, resize set $dw $dh"
}


## User-script parts

system_display_maincmds="displays help monitors version"
system_display_shortdescr='System monitors, window server, and window managers.'

system_display_aliasargv ()
{
  case "$1" in
  ( monitor ) shift; set -- mouse "$@" ;;
  esac
}

system_display_loadenv ()
{
  . "$US_BIN"/xorg.lib.sh &&
  . "$US_BIN"/user-script.lib.sh &&
  . "$US_BIN"/user-desktop &&
  return ${_E_continue:-195}
}

system_display_usage ()
{
  printf \
'    %s <Command <Arg...>>

FIXME: have been meaning to list actual monitor names iso. link names but
found only incomplete data with read-edid.
But e.g.
xfconf-query -lvc displays
and other config tools do provide actual monitor names
' "$base"
}


# Main entry (see user-script.sh for boilerplate)

us-env -r user-script || ${uc_stat:-exit} $?

! script_isrunning "system-display" || {
  script_bases=system-display,user-script-sh
  user_script_load || exit $?
  # Pre-parse arguments
  script_defcmd=list
  user_script_defarg=defarg\ aliasargv
  eval "set -- $(user_script_defarg "$@")"
}

# Execute argv and return
script_entry "system-display" "$@"
#
