#!/usr/bin/env bash

### User desktop: helper commands for appearance and window manager

test -n "${uc_lib_profile:-}" ||
  . "${UCONF:?}/etc/profile.d/bash_fun.sh" || ${stat:-exit} $?
uc_script_load user-script || ${stat:-exit} $?

! script_isrunning "user-desktop" || {
  PATH=$PATH:${US_BIN:?}/tools/sh/parts uc_script_load \
    us-als-mpe feh || ${stat:-exit} $?
}


background () # ~ (:-info)
{
  local act=${1:-info}; test $# -eq 0 || shift
  case "$act" in
    ( h|help )
        echo "~ c|choose # select background picture"
        echo "~ gradient <...>"
        echo "~ set <Image>"
        echo "~ preview"
      ;;
    ( c|choose )
          img=$(backgrounds preview) && background set "$img" ;;
    ( gradient )
        . ${US_BIN:?}/im-gradient.sh || return
        case "${1:-day-blue}" in
          ( h|help )
              echo "~ gradient dust|orange-glow"
              echo "~ gradient gas|poison|day-green"
              echo "~ gradient day|day-blue"
              echo "~ gradient orange"
              echo "~ gradient night|green"
            ;;
          ( dust|orange-glow ) user_background_gradient 12x12 chauvet-dystopic-glow 180 ;;
          ( gas|poison|day-green ) user_background_gradient 12x12 chauvet-day-green 0 ;;
          ( day|day-blue ) user_background_gradient 12x12 chauvet-day-blue 0 ;;
          ( orange ) user_background_gradient 12x12 chauvet-dark-orange-mono 0 180 ;;
          ( night|green ) user_background_gradient 12x12 chauvet-dark-green-mono 0 180 ;;
          ( * ) $LOG error ":$act:$1" "No such gradient setting"
            return 1
        esac
      ;;
    ( i|info ) false ;; # TODO
    ( s|set )
          feh --bg-fill "$@" ;;
    ( p|preview )
          backgrounds preview "$@" ;;

    ( * ) $LOG error ":$act" "No such action" "$act"; return 67
  esac
}

backgrounds () # ~ <-list>
{
  local act=${1:-list}; test $# -eq 0 || shift
  case "$act" in

    ( l|list ) # List user's desktop background images
        backgrounds_list ;;

    ( p|preview ) # ~ [<Fzf-Opts...>] # Use fzf+feh to browse through images
        local bg=${preview_bg:-}
        # TODO: move to Chauvet dark/light theme files
        test -n "$bg" || {
          test "${CS:-dark}" = "dark" && bg="#1c1c1c" || bg="#dadada"
        }
        backgrounds_list | fzf-tmux \
          --preview='feh --title feh-preview -B "'"$bg"'" -Z {} -.' \
          --preview-window=0 "$@" ;;

      * ) $LOG error ":$act" "No such action" "($#) $*" 67 ;
  esac
}

backgrounds_list ()
{
  {
    backgrounds_tag_find &&
    backgrounds_dirs_find

  } | remove_dupes
}

backgrounds_select ()
{
  img=$(backgrounds preview) &&
  background_set "$img"
}

backgrounds_tag_find ()
{
  find "${PICTURES}" \( ! -path '*/.*' \) -ipath "*$user_bgtag*" -type f
}

backgrounds_dirs_find ()
{
  test $# -gt 0 || {
    test -e "$BG_DIR" && set -- "$BG_DIR"
    for d in /usr/share/backgrounds /usr/share/pixmaps/backgrounds
    do
      test ! -d "$d" || set -- "$@" "$d"
    done
    unset d
  }
  act=find_nonhidden_files p="" s="" foreach_do "$@"
}

bg_get () # ~ <Tags>...
{
  false
  #image scale
}

# XXX: feh can do multihead fine together just not one in a multihead
# subsequent arguments are monitor numbers
# TODO: prepare fancy background, maybe do some tinting, tiling or mask.
# Or use single image, not sure if feh supports already.
# For now feh suffices, for multiple backgrounds as well.
# See also background gradient.
background_set () # ~ <File> <Display>...
{
  feh --bg-fill "$1"
  return

  fn="$1"
  shift

  . $US_BIN/system-display || return
  #. $US_BIN/xorg.lib.sh || return
  #shellcheck disable=2046
  #set -- $(display "$1") || return
  #geom=$(display_info "$(display "$1")" | cut -d ' ' -f 2)
  display_geom=$(mouse_display | cut -d ' ' -f 3)

  . $US_BIN/image || return

  echo display geom: $display_geom
  geom=$(echo $display_geom | sed 's/+.*/+0+0/')

  scale "$geom" "$fn" "scaled.jpg"
  colorize "scaled.jpg" "tinted.jpg" "#000000" 85

  #shellcheck disable=2068
  for d in $@
  do
      display_setbg "$d" "$fn" "${BG_MODE:="fill"}"
  done
  unset fn d
}

files () # ~ (:-info)
#            <content-type-tag> [<base-folder> [<tags...>]]
{
  local act=${1:-info}; test $# -eq 0 || shift
  case "$act" in
    ( audio|music )
      ;;
    ( desktop|desk|current@local )
      ;;
    ( documents|docs )
      ;;
    ( downloads )
      ;;
    ( images|pictures )
      ;;
    ( info ) TODO ;; # TODO
    ( projects )
      ;;
    ( projectdirs )
      ;;
    ( shares )
      ;;
    ( src )
      ;;
    ( videos|movies )
      ;;

    ( * ) $LOG error ":$act" "No such action" "$act"; return 67
  esac
}

preview () # ~ <Path> [<Mediatype>]
{
  test $# -gt 1 || set -- "${1:?}" "$(file -bi "$1")"
  #local mime_param
  #mime_param=${2#*; }
  case "${2%;*}" in

    ( "application/epub+zip" )
          exec fbreader --name=user-preview "$1" 2>/dev/null
        ;;

    ( "application/pdf" )
        exec evince --gtk-name=user-preview "$1" ;;

    ( "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | \
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | \
      "application/vnd.ms-excel" \
    )
        exec libreoffice --nologo --norestore --show --view "$1" ;;

    ( "application/zip" | \
      "application/x-bzip2" | \
      "application/gzip" \
    )
        exec file-roller --gtk-name=user-preview "$1" ;;

    ( "image/gif" )
        : "$(identify "$1" | wc -l)"
        test 1 -lt $_ && {
          exec mpv --x11-name=gif-preview --no-terminal "$1"
        } || {
          preview "$1" image/
          return
        }
      ;;

    #( "image/x-xcf " )
    ( "image/"* )
        exec feh --title feh-preview -B black -Z "$1" -. ;;

    ( "text/"* )
        exec system-terminal sensible UC_TERM_NAME=user-preview -- -c "vim \"$1\""
      ;;

    ( * ) echo "Don't know how to preview '$2'" >&2
        return 1
      ;;
  esac
}

screenshot () # ~ [<Display>] # Take screenshot cutout of active display only
{
  dt=$(date --iso=sec)
  # XXX: ~/.l/tmp is not a real TMP dir
  tmpf="$HOME/.local/tmp/Screenshot $dt.png"

  . $US_BIN/system-display || return

  # shellcheck disable=SC2015
  test $# -gt 0 && {

    geom=$(display_info "$(display "$1")" | cut -d ' ' -f 2)
  } || {

    geom=$(mouse_display | cut -d ' ' -f 3)
  }

  test -n "$geom" || {
    stdstat 123 "Cannot get geometry for display"
  }

  scrot "$tmpf"

  # Async works better. Lots of segfaults.
  #i3-msg "exec \"gnome-screenshot -f '$tmpf'\"" || return

  while test ! -e "$tmpf"
  do stdmsg '*info' "Waiting for file..."; sleep 3
  done

  . $US_BIN/image || return
  outf="$HOME/.local/tmp/Screenshot $dt-$geom.png"
  crop "$geom" "$tmpf" "$outf"

  rm "$tmpf"
  mv "$outf" ~/Pictures/
  stdmsg '*note' "Moved screenshot $dt to Pictures"
}

update_for_cs () # ~
{
  test $CS = "light" && {
    theme Greybird

    # Dark Ivy bg for nice high contrast during day
    background set \
        /usr/share/backgrounds/gnome/Dark_Ivy.jpg

    # or something sunny or related to weather?
      #/home/hari/Pictures/Backgrounds/924665-vertical-sunny-day-background-1920x1200-large-resolution.jpg

    true
  } || {
    theme Greybird-dark

    DE_BG=/usr/share/backgrounds/31313-full_4-things-you-can-never-recover-tom-b.jpg
    test -e "$DE_BG" ||
      DE_BG=/home/hari/Pictures/Aesthetics/Backgrounds/31313-full_4-things-you-can-never-recover-tom-b.jpg

    background set "$DE_BG"
  }
}

switch_cs ()
{
  # XXX: should probably track UC_DESKTOP_CS here or something.
  # update config as well, see ~/.conf/etc/i3/start.sh
  update_for_cs && i3-msg reload
}

theme ()
{
  desktop_conf || return
  dash $LOG info "" "Using conf manager" "$DESKTOP_CONF"
  "${DESKTOP_CONF}"_widget_theme "$@"
}

list_themes ()
{
  list_widget_themes
}


find_nonhidden_files ()
{
  find "$1" \( ! -path '*/.*' \) -type f
}


## User-script parts

user_desktop_maincmds="background backgrounds backgrounds_select help screenshots themes update_for_cs switch_cs version"
user_desktop_shortdescr='User desktop tools'

#shellcheck disable=1091 # env.sh and .meta.sh do not need to exist
user_desktop_loadenv ()
{
  test -e "${DISP_CONFIG_DIR:="$HOME/.config/display"}/env.sh" && {
    . "${DISP_CONFIG_DIR}/env.sh"
  }
  test -e "${BG_DIR:="$HOME/Pictures/Backgrounds"}/.meta.sh" && {
    . "${BG_DIR}/.meta.sh"
  }
  #user_script_loadenv || test ${_E_retry:-198} -eq $? || return $_
  : "${_E_not_found:=127}" # NSFC no-such-file-or-command
  user_desktop_defaults &&
  lib_require os sys-htd str-htd desktop xorg
}

user_desktop_aliasargv ()
{
  case "$1" in
      ( b|bg ) shift; set -- background "$@" ;;
      ( bgS | backgrounds-select ) shift; set -- backgrounds_select "$@" ;;
      ( bgs ) shift; set -- backgrounds "$@" ;;
      ( update-for-cs ) shift; set -- update_for_cs "$@" ;;
      ( switch-cs ) shift; set -- switch_cs "$@" ;;
      ( set-bg ) shift; set -- background set "$@" ;;
      ( themes ) shift; set -- list_themes "$@" ;;
      ( "-?"|-h|h|help ) shift; set -- user_script_help "$@" ;;
  esac
}

user_desktop_defaults ()
{
  true "${PICTURES:=$HOME/Pictures}"
  true "${BG_DIR:=$PICTURES/Backgrounds}"
  true "${user_bgtag:="background"}"
}


# Main entry (see user-script.sh for boilerplate)

test -n "${uc_lib_profile:-}" || . "${UCONF:?}/etc/profile.d/bash_fun.sh"
uc_script_load user-script

! script_isrunning "user-desktop" || {
  user_script_load || exit $?

  user_script_defarg=defarg\ aliasargv

  # Pre-parse arguments
  eval "set -- $(user_script_defarg "$@")"
}

script_entry "user-desktop" "$@"
#
