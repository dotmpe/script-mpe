#!/usr/bin/env python
"""
mimereg - a config based extension-mediatype mapper

See basename-reg which has some stuf growing out of it that does not really
belong there anymore.

TODO: handle language tags
TODO: handle encoding tags
"""
from __future__ import print_function
import os
import sys
import optparse
from pprint import pformat

from script_mpe.libhtd import *


usage_descr = "XXX see basename-reg to register ext/mimes. this only lists stuff"

CONFIG_DEFAULT = dict(
        fer = dict( # this program
            ext_map = dict( # multi-format tags
                tgz = ['tar','gz']
            ),
            mime_ext_reg = dict( # the local extension-mime mapping
            ),
            lang_xref = dict(), # generate map for locale TODO load from ISO lists
            charset_xref = dict(), # TODO: load/generate also
            mime_xref = { # map mime to a list with all known extensions, a category and description
                    "application/yaml": (['yaml'], 'Script', "Yet Another Markup Language")
                }
            )
        )

settings = None
fullname = None

def save_settingsig():
    global settings, fullname
    fl = open(fullname, 'rw+')
    yaml.dump(settings, fl)
    fl.close()

#

class FileExtensionRegistry(libcmd.SimpleCommand):
  
    PROG_NAME = os.path.splitext(os.path.basename(__file__))[0]
    NAME = PROG_NAME
    VERSION = "0.1"
    USAGE = """Usage: %prog [options] paths """

    DEFAULT_CONFIG_KEY = NAME
    BOOTSTRAP =  [ 'static_args','parse_options','load_config','set_commands' ]
    DEFAULT = [ 'run_filetype_scan' ]
    DEFAULT_RC = os.path.expanduser('~/.basename-reg.yaml')
    # XXX: restore DEFAULT_CONFIG_KEY = 'fer'

    def run_filetype_scan(self, opts, prog, settings, *paths):

        """
        Use mime-data from host systems ``file`` or alt,
        optionally override/supplement from registry 

        Usage: [paths..] 
            Use mime magic to retrieve mime spec for files.
        Usage: --override-magic <ext> 
            Print mimetypes for extensions from registry.

        For other outputs, see -qEDm and --media-type, --content-type.
        """

        for path in paths:
            if '.' in os.path.basename(path):
                fext = os.path.splitext(path)[1][1:]
            else:
                fext = path

            # get data from `file -s` or equiv.
            if opts.override_magic:
                assert fext, "--override-magic needs extension"
                mime = settings.mime_ext_reg[ fext ]
                content_type = mime
                mimespec = settings.mime_xref[ mime ]
                descr = mimespec[2]
                ext = mimespec[0][0]

            else:
                content_type = mime = lib.get_mediatype_sub(path)
                if ';' in content_type:
                    mime = content_type.split(';')[0].strip()
                if mime in settings.mime_xref:
                    mimespec = settings.mime_xref[ mime ]
                    ext = mimespec[0][0]
                else:
                    sys.stderr.write("No x-ref for MIME %s\n" % mime)
                    ext = None
                if opts.media_type or opts.print_descr:
                    descr = lib.get_format_description_sub(path)

            if ext:
                if fext != ext:
                    sys.stderr.write("Warning filename-extension %r does not match registered %r\n" % ( fext, ext))
            else:
                sys.stderr.write("Default extension! %s\n" % path)
                ext = 'bin'

            # format and output
            if opts.content_type:
                line = content_type
            if opts.mime_type:
                line = mime
            if opts.media_type:
                line = ext +' '+ mime +' '+ descr
            elif opts.print_descr:
                line = descr
            elif opts.print_ext:
                line = ext
            if not opts.quiet and opts.print_path:
                print(path+':', end=" ")
            print(line)

    def _old_scan(self, tag, settings=None):
        print(tag)
        settings = confparse.Values(settings)
        tags = [tag]
        for t in tags:
            while t in settings.ext_map:
                i = tags.index(t)
                tags.remove(t)
                tags = tags[:i] + settings.ext_map[t] + tags[i+1:]
        print(tags)

    def list_extensions(self, prog, settings):
        "List all (registered) extensions"
        settings = confparse.Values(settings)
        for x in settings.mime_ext_reg:
            print(x)

    def list_mediatypes(self, settings):
        "List all (global) mediatypes"
        settings = confparse.Values(settings)
        for x in settings.mime_xref:
            print(x)

    @classmethod
    def get_optspec(klass, inherit):
        """
        Return tuples with optparse command-line argument specification.
        """
        return (
                (('--print-path',), dict(
                    action="store_true",
                    default=True,
                    help="Print path and semicolon before each resul. ",
                )),
                #(('--json',), dict(
                #    type="bool",
                #    default=False,
                #    help="Decode content-type spec to json. ",
                #)),
                (('-E', '--ext', '--extension'), dict(
                    dest="print_ext",
                    action="store_true",
                    default=False,
                    help="Print extension only.",
                )),
                (('-D', '--descr', '--description'), dict(
                    dest="print_descr",
                    action="store_true",
                    default=False,
                    help="Print description only.",
                )),
                (('-m', '--mime-type',), dict(
                    dest="mime_type",
                    action="store_true",
                    default=True,
                    help="Print mime-type major/minor only.",
                )),
                (('--media-type',), dict(
                    dest="media_type",
                    action="store_true",
                    default=False,
                    help="Print extension, mimetype and description.",
                )),
                (('--content-type',), dict(
                    dest="content_type",
                    action="store_true",
                    default=False,
                    help="Print content-type header alike value: includes mime-type and parameters.",
                )),
                (('--override-magic',), dict(
                    dest="override_magic",
                    action="store_true",
                    default=False,
                    help="Use file extension instead of hosts mime-magic.",
                )),
                (('-l', '--list-extensions',), libcmd.cmddict()),
                (('-t', '--list-mediatypes',), libcmd.cmddict()),
            )


if __name__ == '__main__':
    FileExtensionRegistry.main()
