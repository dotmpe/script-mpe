#!/usr/bin/env bash

### User tools: commands for generic desktop ops, config and misc. scripts


forecast () # ~
{
  forecast_tab |
    while read -r time code desc
    do
      # shellcheck disable=2086,2046
      echo $time $(date-util relative-ts-abbrev "" "$time" "") $code $desc
    done
}

forecast_tab ()
{
  location_weather_info | jq -r \
    '.weather[0].hourly[] | "\(.time) \(.weatherCode) \(.weatherDesc[0].value)"'
}

location_weather_info ()
{
  curl "v2n.wttr.in/${wttr_loc-}?format=j1"
}

weather () # ~
{
  location_weather | cut -d ':' -f 2 | sed 's/^ //' | lines_to_words
}

weatherdata () # ~
{
  location_weather_info | jq .
}

# Weather is name for location, unicode symbol and temperature.
location_weather ()
{
  curl -sSf "v2n.wttr.in/${wttr_loc-}?format=3" | lines_to_words
}

moon ()
{
  curl -sSf "v2n.wttr.in/${wttr_loc-}?format=%m" | lines_to_words
}


location ()
{
  assert_location || {
    stdmsg '*err' "No user location. Please provide GEO_{LOC,HOME}"
    return 1 # XXX: autodetect/select approx. location using locale
    timezone || return
    eval $(timezone_to_location) || return
  }
  echo "User location: ${GEO_LOC:-${GEO_HOME:-}}"
}

assert_location ()
{
  test -n "${GEO_LOC:-${GEO_HOME:-}}" || return
}


# TODO: tags for times of day

# To provide names for every hour, the choice is what time measurement, and which
# periods to count, and name. The basic Western scheme of a 12 hour day and 12
# hour night is pretty common. Anyway this includes three schemes to name periods.
# Each can be combined with administrative (local) time, or with real
# (calculated) solar time.

# Basic: {day {morning,afternoon},evening,night}
#   Four six hour periods
#
# Astronomical: {day {morning,afternoon,evening{, dusk twillight},night{, dawn twillight}}
#   Two periods of 3 uneven parts: morning 1/4, afternoon and evening of 1/8th
#   each. And night divided into dusk and twillight.
#
#
timeofday () # ~ [<Hour>]
{
  ${UC_TOD:-"hour_tags"} "$@"
}

#
astronomical_hours () # ~ [<Hour>]
{
  test $# -gt 0 || set -- $(solar_time -d "${DT_NOW:-now}" +"%H")

  false
}

# List tags to describe the current hour, selected from various sets.
# Below are just some european examples of mappings for periods of the day or
# "hours"
hour_tags () # ~ [<Hour>]
{
  test $# -gt 0 || set -- $(hour)

  echo $( for group in ${UC_DAY_HOURS:-europe_anglo europe_latin europe_medieval}
      do hours_$group "$@"
      done)
}

hour ()
{
  test "${SOLAR_TIME:-0}" = "1" && {
    solar_time | cut -d ':' -f 1
  } || {
    date -d "${DT_NOW:-now}" +"%H"|sed 's/^0//'
  }
}

hours_europe_anglo () # (y) ~ Give local labels/tags for hour of the day
{
  case "${1:?}" in

     6| 7| 8 ) echo Day Morning Dawn Sunrise ;;
     9|10|11 ) echo Day Morning ;;
    12|13|14 ) echo Day Afternoon Noon Mid-afternoon ;;
    15|16|17 ) echo Day Afternoon Evening Twillight ;;
    18|19|20 ) echo Evening Early Dusk Sunset ;;
    21|22|23 ) echo Evening Late Night Midnight ;;
     0| 1| 2 ) echo Night Dead_of_Night Witching_Hour Gloaming ;;
     3| 4| 5 ) echo Night Early Pre_Dawn Cockrow ;;

     *) echo "hours? '$1'" >&2
         return 1 ;;
  esac
}

hours_europe_latin () # (y) ~ Give local labels/tags for hour of the day
{
  case "${1:?}" in

     6| 7| 8 ) echo Mane ;;
     9|10|11 ) echo Antemeridianum ;;
    12|13|14 ) echo Merides ;;
    15|16|17 ) echo Postmeridianum ;;
    18|19|20 ) echo Vesper ;;
    21|22|23 ) echo Nox ;;
     0| 1| 2 ) echo Nox_media ;;
     3| 4| 5 ) echo Gallicinium ;;

     *) echo "hours? '$1'" >&2
         return 1 ;;
  esac
}

hours_europe_medieval () # (y) ~ Give local labels/tags for hour of the day
{
  case "${1:?}" in

     6| 7| 8 ) echo Minor Prime ;;
     9|10|11 ) echo Minor Terce ;;
    12|13|14 ) echo Minor Sext ;;
    15|16|17 ) echo Minor None ;;

    18|19|20 ) echo Major Vespers ;;
    21|22|23 ) echo Major Compline ;;
     0| 1| 2 ) echo Major Matins ;;
     3| 4 ) echo Major ;;
     5| 6 ) echo Major Lauds ;;

     *) echo "hours? '$1'" >&2
         return 1 ;;
  esac
}

timeofyear () # ~
{
  ${UC_TOY:-"season"}
}

season () # ~
{
  season_"${UC_SEASON:-meteorological}"
}

season_meteorological () # ~ [<Month>] # Give season based on month of year
{
  test $# -gt 0 || set -- $(date -d "${DT_NOW:-now}" +"%m"|sed 's/^0//')

  case "$1" in

     3| 4| 5 ) echo spring ;;
     6| 7| 8 ) echo summer ;;
     9|10|11 ) echo autumn ;;
    12| 1| 2 ) echo winter ;;

    * ) return 1 ;;
  esac
}

# Use to check light conditions at users location.
#
# Not sure yet what to do with twillight. Also light conditions depend on
# weather, and more. Current impl. uses astronomical algorithms and has
# one mode with parameters:
#
#   GEO_HOME the decimal latitude and longitude to measure from
#   HORIZON the degrees a line to the center of the sun makes relative to the
#     local horizon(tal pane). Default is -6 for the usual standard 'civil
#     twillight'. HOME_HORIZON may be used to change sunrise/sunset.
#   SHIFT delay or advance the moments
#
# XXX: think the most natural is anticipate the next phase of te day by some
# period, ie. act before the moment instead of making a symmetrical switch at
# dawn and dusk.
actual_darktime () # ~ [<Datetime>]
{
  test $# -eq 0 || return ${_E_GAE:-$?}

  # Test for actual nighttime, excluding daytime and twillight.
  TWILLIGHT_HORIZON=${HORIZON:-"-3"} \
  HORIZON=${HOME_HORIZON:-"0"} \
  SHIFT_TIME=${SHIFT:-${DARKTIME_SHIFT:-"0"}} \
  GEO_LOC=${GEO_LOC:-${GEO_HOME:?}} \
    ${python3_bin:-python3} ~/bin/ephem-day-times.py ${EPHEM_CMD:-"night"} "$@"
}

solar_time ()
{
  GEO_LOC=${GEO_LOC:-${GEO_HOME:?}} \
    ${python3_bin:-python3} ~/bin/ephem-day-times.py solar-time "$@" |
    grep -v '^#'
}

timezone_to_location ()
{
  false
}

state ()
{

  test "${NERD_FONT:-1}" != "0" && {
    state_icon_${NERD_FONT_STATUS:-fa} "$1"
  } || {
    echo "$1"
  }
}

state_icon_fa () # (y) ~ <State>
{
  case "${1:-}" in
      ( ok ) printf "%s" "$nf_fa_check" ;;
      ( failed ) env printf $nf_fa_close ;;
  esac
}

ssh_agent_key_count ()
{
  count=$(SSH_AUTH_SOCK=/run/user/$(id -u)/openssh_agent ssh-add -l | wc -l) || return 0
  echo "$count"
}

sessions_tmpfile_check ()
{
  local fn=${1:?} pid
  : "${fn%:mpe-*}"
  : "${_##*:}"
  pid="$_"
  [[ "$pid" =~ ^[0-9]+$ ]] && if_ok "$(ps -o cmd= "$pid")"
}

sessions_tmpfile_cleanup ()
{
  local fn=${1:?} pid cmdln
  : "${fn%:mpe-*}"
  : "${_##*:}"
  pid="$_"
  [[ "$pid" =~ ^[0-9]+$ ]] || {
    stderr echo "Not a PID: $pid: $fn"
    ls -la "$fn"
    #stat "$fn"
    #lsof "$fn"
    return ${_E_next:?}
  }
  cmdln=$(ps -o cmd= "$pid") || {
    rm -v "$fn"
    return ${_E_next:?}
  }
  printf '%i: `%s` <%s>\n' "$pid" "$cmdln" "$fn"
}

sessions () # (y) ~ <Action ...> # List and check user sessions
{
  case "${1:-list}" in
  ( check|chk )
      shopt -s nullglob &&
      exec_exp "$SD_SHELL_DIR/*:mpe-{login,rc}*" sessions_tmpfile_check
    ;;
  ( cleanup|cln )
      shopt -s nullglob &&
      exec_exp "$SD_SHELL_DIR/*:mpe-{login,rc}*" sessions_tmpfile_cleanup
    ;;
  ( list|ls )
      cat "$SD_SLOG"
    ;;
  ( temp-files|lf )
      shopt -s nullglob &&
      set -- $SD_SHELL_DIR/*:mpe-{login,rc}*
      test $# -eq 0 && return ${_E_nsk:?}
      ls "$@"
    ;;
  ( temp-files-lines|llf )
      shopt -s nullglob
      set -- $SD_SHELL_DIR/*:mpe-{login,rc}*
      test $# -eq 0 && return ${_E_nsk:?}
      wc -l "$@"
    ;;
  ( * ) return ${_E_nsa:-68}
  esac
}

## User-script parts

user_tools_maincmds="forecast help location weather season version"
user_tools_shortdescr='User tools.'

user_tools_aliasargv ()
{
  case "$1" in
      ( m|media ) shift; set -- us_media "$@" ;;
      ( sort|media-sort ) shift; set -- catalog_uc_sort "$@" ;;
      ( key-count ) shift; set -- ssh_agent_key_count "$@" ;;
      ( darktime ) # ~
          # Test wether dark or light colorscheme (CS) should be used
          shift; set -- actual_darktime "$@" ;;
      ( "-?"|-h|h|help ) shift; set -- user_script_help "$@" ;;

  esac
}

user_tools_loadenv ()
{
  test $# -gt 0 || set -- "$script_cmd"
  while test $# -gt 0
  do
    case "$1" in

      #( sh-mode )
      #      user_script_libload "${U_S:?}"/tools/sh/parts/sh-mode.sh ;;
      #( error-handler )
      #      declare -f sh_mode >/dev/null && {
      #        sh_mode dev || return
      #      } || set -- "" sh-mode "$@"
      #    ;;

      ( catalog )
          user_script_libload $UCONF/script/catalog-uc.lib.sh &&
              catalog_uc_lib__load ;;
      ( media )
          user_script_libload $UCONF/script/media-uc.lib.sh \
                $US_BIN/contexts/ctx-playerctl.lib.sh &&
                media_uc_lib__load && ctx_playerctl_lib__load ;;

      ( nerdfonts )
          . "$US_BIN"/nerdfonts.lib.sh &&
              nerdfonts_lib__load && nerdfonts_lib__init ;;

      ( all ) set -- "" nerdfonts media catalog ;;
      ( user_script_handlers ) set -- "" all ;;
      ( catalog_uc_sort ) set -- "$@" catalog ;;
      ( us_media ) set -- "$@" media ;;

      ( * ) set -- "" nerdfonts ;;
    esac || return
    shift
  done
  $LOG notice "$lk:loadenv" "User script loaded" "[-$-] (#$#) ~ ${*@Q}"
}


# Main entry (see user-script.sh for boilerplate)

test -n "${uc_lib_profile:-}" || . "${UCONF:?}/etc/profile.d/bash_fun.sh"
uc_script_load user-script

! script_isrunning "user-tools" || {
  user_script_load || exit $?

  script_defcmd=location
  user_script_defarg=defarg\ aliasargv

  # Pre-parse arguments
  eval "set -- $(user_script_defarg "$@")"

  script_run "$@"
}
